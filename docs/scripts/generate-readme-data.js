import { readFileSync, writeFileSync, existsSync } from 'fs'
import { join } from 'path'
import { marked } from 'marked'

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ HTML –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
function cleanHtml(html) {
  // –£–¥–∞–ª—è–µ–º –±–ª–æ–∫ —Å badges –∏ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  let cleaned = html.replace(
    /<div align="center">[\s\S]*?<\/div>/g,
    ''
  )
  
  // –£–¥–∞–ª—è–µ–º –±–ª–æ–∫ —Å —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –ª–æ–∫–∞–ª–∏
  cleaned = cleaned.replace(
    /<div class="locale">[\s\S]*?<\/div>/g,
    ''
  )
  
  // –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ –Ω–∞—á–∞–ª–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
  cleaned = cleaned.replace(/^\s+/, '')
  
  return cleaned
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ markdown
async function parseMarkdown(markdown) {
  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º marked
  marked.setOptions({
    breaks: true,
    gfm: true
  })
  
  // –ü–∞—Ä—Å–∏–º markdown –≤ HTML
  const html = await marked.parse(markdown)
  
  // –û—á–∏—â–∞–µ–º HTML –æ—Ç –Ω–µ–Ω—É–∂–Ω—ã—Ö –±–ª–æ–∫–æ–≤
  const cleanedHtml = cleanHtml(html)
  
  // –î–æ–±–∞–≤–ª—è–µ–º —è–∫–æ—Ä—è –∫ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º (–∫–∞–∫ –Ω–∞ GitHub)
  const htmlWithAnchors = cleanedHtml.replace(/<h([1-6])([^>]*)>(.*?)<\/h[1-6]>/g, (match, level, attrs, text) => {
    const escapedText = text.toLowerCase().replace(/[^\w]+/g, '-')
    const id = `heading-${escapedText}`
    
    return `
      <h${level} id="${id}"${attrs}>
        <a name="${escapedText}" class="anchor" href="#${escapedText}">
          <span class="header-link"></span>
        </a>
        ${text}
      </h${level}>`
  })
  
  // –î–æ–±–∞–≤–ª—è–µ–º target="_blank" –∫ –≤–Ω–µ—à–Ω–∏–º —Å—Å—ã–ª–∫–∞–º
  const htmlWithLinks = htmlWithAnchors.replace(/<a href="(https?:\/\/[^"]+)">([^<]+)<\/a>/g, '<a href="$1" target="_blank" rel="noopener noreferrer">$2</a>')
  
  // –£–ª—É—á—à–∞–µ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
  const htmlWithTables = htmlWithLinks.replace(
    /<table>/g,
    '<table class="console-table">'
  )
  
  // –î–æ–±–∞–≤–ª—è–µ–º data-language –∫ –±–ª–æ–∫–∞–º –∫–æ–¥–∞
  const htmlWithCodeLang = htmlWithTables.replace(/<pre><code class="language-(\w+)">/g, '<pre class="code-block" data-language="$1"><code class="language-$1">')
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å code-block –∫ –æ–±—ã—á–Ω—ã–º –±–ª–æ–∫–∞–º –∫–æ–¥–∞ –±–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
  const htmlWithAllCodeBlocks = htmlWithCodeLang.replace(/<pre><code>/g, '<pre class="code-block"><code>')
  
  return htmlWithAllCodeBlocks
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–≥–ª–∞–≤–ª–µ–Ω–∏—è –∏–∑ markdown
function generateToc(markdown) {
  // –û—á–∏—â–∞–µ–º markdown –æ—Ç badges –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ TOC
  let cleanedMarkdown = markdown.replace(
    /<div align="center">[\s\S]*?<\/div>/g,
    ''
  )
  
  const toc = []
  const lines = cleanedMarkdown.split('\n')
  
  for (const line of lines) {
    // –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ markdown (# ## ### –∏ —Ç.–¥.)
    const headingMatch = line.match(/^(#{1,6})\s+(.+)$/)
    if (headingMatch) {
      const level = headingMatch[1].length
      const title = headingMatch[2].trim()
      
      // –°–æ–∑–¥–∞–µ–º ID –∫–∞–∫ –≤ HTML (lowercase, –∑–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –¥–µ—Ñ–∏—Å—ã)
      const id = title.toLowerCase().replace(/[^\w]+/g, '-')
      
      toc.push({
        id: `heading-${id}`,
        title,
        level
      })
    }
  }
  
  return toc
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
async function generateReadmeData() {
  const locales = ['en', 'ru', 'de', 'ja', 'zh']
  const dataDir = join(process.cwd(), 'data', 'readme')
  
  // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  if (!existsSync(dataDir)) {
    const fs = await import('fs')
    fs.mkdirSync(dataDir, { recursive: true })
  }
  
  for (const locale of locales) {
    try {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ª–æ–∫–∞–ª–∏
      const readmeFile = locale === 'en' ? 'README.md' : `README_${locale.toUpperCase()}.md`
      const filePath = join(process.cwd(), '..', readmeFile)
      
      if (!existsSync(filePath)) {
        console.log(`Skipping ${readmeFile} - file not found`)
        continue
      }
      
      // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
      const rawContent = readFileSync(filePath, 'utf-8')
      
      // –ü–∞—Ä—Å–∏–º markdown –≤ HTML
      const html = await parseMarkdown(rawContent)
      const toc = generateToc(rawContent)
      
      // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–∞–Ω–Ω—ã—Ö
      const data = {
        success: true,
        content: html,
        toc,
        locale
      }
      
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
      const outputPath = join(dataDir, `${locale}.json`)
      writeFileSync(outputPath, JSON.stringify(data, null, 2))
      
      console.log(`‚úÖ Generated ${locale}.json`)
      
    } catch (error) {
      console.error(`‚ùå Error processing ${locale}:`, error.message)
      
      // –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º fallback —Å –∞–Ω–≥–ª–∏–π—Å–∫–∏–º README
      try {
        const fallbackPath = join(process.cwd(), '..', 'README.md')
        if (existsSync(fallbackPath)) {
          const fallbackContent = readFileSync(fallbackPath, 'utf-8')
          const html = await parseMarkdown(fallbackContent)
          const toc = generateToc(fallbackContent)
          
          const data = {
            success: true,
            content: html,
            toc,
            locale: 'en',
            fallback: true
          }
          
          const outputPath = join(dataDir, `${locale}.json`)
          writeFileSync(outputPath, JSON.stringify(data, null, 2))
          
          console.log(`‚úÖ Generated ${locale}.json (fallback)`)
        }
      } catch (fallbackError) {
        console.error(`‚ùå Error creating fallback for ${locale}:`, fallbackError.message)
      }
    }
  }
  
  console.log('üéâ README data generation completed!')
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
generateReadmeData().catch(console.error) 