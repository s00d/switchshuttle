use crate::config::CommandConfig;
use crate::{console, helpers};
use std::sync::{Arc};
use std::time::Duration;
use std::thread;
use tauri::{AppHandle, Wry};
use tauri::menu::{
    CheckMenuItem, IconMenuItem, MenuBuilder, Submenu as TauriSubmenu, SubmenuBuilder,
};
use std::sync::atomic::AtomicBool;
use std::sync::atomic::Ordering;
use std::sync::Mutex;

use crate::helpers::{create_menu_item, create_check_menu_item};

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç—Ä–µ—è
lazy_static::lazy_static! {
    pub static ref TRAY_ACTIVE: Arc<Mutex<bool>> = Arc::new(Mutex::new(false));
}

/// –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –º–µ–Ω—é
#[derive(Clone)]
pub struct MenuItem {
    // –ù–∞—Å–ª–µ–¥—É–µ–º –≤—Å–µ –ø–æ–ª—è –æ—Ç CommandConfig
    pub config: crate::config::CommandConfig,
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –º–µ–Ω—é –ø–æ–ª—è
    pub tauri_icon_item: Option<Arc<IconMenuItem<Wry>>>,
    pub stop_flag: Option<Arc<AtomicBool>>,
}

/// –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–¥–º–µ–Ω—é
#[derive(Clone)]
pub struct Submenu {
    pub name: String,
    pub icon: Option<String>,
    pub items: Vec<MenuItem>,
}

/// –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–ª–Ω–æ–µ –º–µ–Ω—é —Å–∏—Å—Ç–µ–º—ã
pub struct SystemMenu {
    pub items: Vec<MenuItem>,
    pub submenus: Vec<Submenu>,
}

impl MenuItem {
    /// –°–æ–∑–¥–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –º–µ–Ω—é –∏–∑ CommandConfig
    pub fn from_command_config(cmd: &CommandConfig) -> Self {
        Self {
            config: cmd.clone(),
            tauri_icon_item: None,
            stop_flag: None,
        }
    }

    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–º
    pub fn is_switch(&self) -> bool {
        self.config.switch.is_some()
    }

    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –∫–æ–º–∞–Ω–¥–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    pub fn is_monitor(&self) -> bool {
        self.config.monitor.is_some()
    }

    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–º–µ–µ—Ç –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –ø–æ–¥–º–µ–Ω—é
    pub fn has_submenu(&self) -> bool {
        self.config.submenu.is_some() && !self.config.submenu.as_ref().unwrap().is_empty()
    }

    /// –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è —Å —É—á–µ—Ç–æ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    pub fn get_display_name(&self, _app: Option<&AppHandle<Wry>>) -> String {
        if self.is_monitor() {
            if let Some(monitor_command) = &self.config.monitor {
                // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                match console::execute_command_silent(monitor_command) {
                    Ok(output) => {
                        let result = output.trim();
                        if !result.is_empty() {
                            format!("{}: {}", self.config.name, result)
                        } else {
                            self.config.name.clone()
                        }
                    }
                    Err(_) => {
                        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Å—Ç–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
                        self.config.name.clone()
                    }
                }
            } else {
                self.config.name.clone()
            }
        } else {
            self.config.name.clone()
        }
    }

    /// –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–∞–π–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
    pub fn start_monitor_timer(&mut self) {
        if self.is_monitor() {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ –ø—É—Å—Ç–∞—è
            if let Some(monitor_command) = &self.config.monitor {
                if monitor_command.trim().is_empty() {
                    eprintln!("[Monitor] Empty monitor command for item: {}", self.config.id.as_ref().unwrap_or(&self.config.name));
                    return;
                }
            } else {
                eprintln!("[Monitor] No monitor command for item: {}", self.config.id.as_ref().unwrap_or(&self.config.name));
                return;
            }
            
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–æ—Ç–æ–∫, –µ—Å–ª–∏ –±—ã–ª
            self.stop_monitor_timer();
            let stop_flag = Arc::new(AtomicBool::new(false));
            self.stop_flag = Some(stop_flag.clone());
            if let Some(icon_item) = self.tauri_icon_item.clone() {
                let monitor_command = self.config.monitor.clone().unwrap();
                let name = self.config.name.clone();
                let id = self.config.id.clone().unwrap_or_else(|| self.config.name.clone());
                let icon = self.config.icon.clone();
                thread::spawn(move || {
                    eprintln!("[Monitor] Starting timer for item: {}", id);
                    while !stop_flag.load(Ordering::Relaxed) {
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ç—Ä–µ—è
                        let tray_active = TRAY_ACTIVE.lock().unwrap();
                        if *tray_active {
                            drop(tray_active); // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
                            
                            let new_text = match crate::console::execute_command_silent(&monitor_command) {
                                Ok(output) => {
                                    let result = output.trim();
                                    if !result.is_empty() {
                                        format!("{}: {}", name, result)
                                    } else {
                                        name.clone()
                                    }
                                }
                                Err(_) => name.clone(),
                            };
                            eprintln!("[Monitor] Updating text for {}: {}", id, new_text);
                            
                            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∏–∫–æ–Ω–∫–∏
                            if let Some(icon_str) = &icon {
                                if let Err(e) = icon_item.set_text(&format!("{} {}", icon_str, new_text)) {
                                    eprintln!("[Monitor] Failed to set text with icon for {}: {}", id, e);
                                } else {
                                    eprintln!("[Monitor] Successfully updated text with icon for {}", id);
                                }
                            } else {
                                if let Err(e) = icon_item.set_text(&new_text) {
                                    eprintln!("[Monitor] Failed to set text for {}: {}", id, e);
                                } else {
                                    eprintln!("[Monitor] Successfully updated text for {}", id);
                                }
                            }
                        } else {
                            drop(tray_active); // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
                            eprintln!("[Monitor] Timer paused for item: {}", id);
                        }
                        thread::sleep(Duration::from_secs(1));
                    }
                    eprintln!("[Monitor] Timer stopped for item: {}", id);
                });
            } else {
                eprintln!("[Monitor] No icon_item found for {}", self.config.id.as_ref().unwrap_or(&self.config.name));
            }
        }
    }

    /// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–∞–π–º–µ—Ä –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–≤—ã—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ–ª–∞–≥)
    pub fn stop_monitor_timer(&mut self) {
        if let Some(flag) = &self.stop_flag {
            flag.store(true, Ordering::Relaxed);
        }
        self.stop_flag = None;
    }

    /// –ü–æ–ª—É—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è
    pub fn get_switch_state(&self, app: Option<&AppHandle<Wry>>) -> bool {
        if self.is_switch() {
            let id = self.config.id.as_ref().unwrap_or(&self.config.name);
            helpers::is_switch_enabled(id, app)
        } else {
            false
        }
    }

    /// –°–æ–∑–¥–∞–µ—Ç Tauri —ç–ª–µ–º–µ–Ω—Ç –º–µ–Ω—é –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã MenuItem
    pub fn create_tauri_menu_item(&mut self, app: &AppHandle<Wry>) -> MenuItemOrSubmenu {
        let id = self.config.id.as_ref().unwrap_or(&self.config.name);
        let name = &self.config.name;
        let hotkey = self.config.hotkey.as_deref();
        let icon = self.config.icon.as_deref();
        
        if self.is_switch() {
            let is_enabled = self.get_switch_state(Some(app));
            MenuItemOrSubmenu::CheckItem(create_check_menu_item(app, id, name, is_enabled, hotkey.map(|s| s.to_string()), icon))
        } else if self.is_monitor() {
            eprintln!("[Monitor] Creating menu item for monitor: {}", id);
            let display_name = self.get_display_name(Some(app));
            let icon_item = create_menu_item(app, id, &display_name, "terminal", hotkey.map(|s| s.to_string()), icon);
            let arc_icon_item = Arc::new(icon_item);
            self.tauri_icon_item = Some(arc_icon_item.clone());
            eprintln!("[Monitor] Saved icon_item for: {}", id);
            MenuItemOrSubmenu::IconItem(Arc::try_unwrap(arc_icon_item).unwrap_or_else(|arc| (*arc).clone()))
        } else {
            MenuItemOrSubmenu::IconItem(create_menu_item(app, id, name, "terminal", hotkey.map(|s| s.to_string()), icon))
        }
    }

    /// –°–æ–∑–¥–∞–µ—Ç Tauri –ø–æ–¥–º–µ–Ω—é –∏–∑ MenuItem —Å –ø–æ–¥–º–µ–Ω—é
    pub fn create_tauri_submenu(&mut self, app: &AppHandle<Wry>) -> TauriSubmenu<Wry> {
        let display_name = if let Some(icon) = &self.config.icon {
            format!("{} {}", icon, self.config.name)
        } else {
            format!("üìÅ {}", self.config.name)
        };
        
        let mut submenu_builder = SubmenuBuilder::new(app, &display_name);
        
        if let Some(submenu_items) = &self.config.submenu {
            for sub_item in submenu_items.iter() {
                let mut menu_item = MenuItem::from_command_config(sub_item);
                if menu_item.has_submenu() {
                    let nested_submenu = menu_item.create_tauri_submenu(app);
                    submenu_builder = submenu_builder.item(&nested_submenu);
                } else {
                    let tauri_item = menu_item.create_tauri_menu_item(app);
                    match tauri_item {
                        MenuItemOrSubmenu::IconItem(icon_item) => {
                            submenu_builder = submenu_builder.item(&icon_item);
                        }
                        MenuItemOrSubmenu::CheckItem(check_item) => {
                            submenu_builder = submenu_builder.item(&check_item);
                        }
                        MenuItemOrSubmenu::Submenu(_) => {
                            // –≠—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –∑–¥–µ—Å—å
                        }
                    }
                }
            }
        }
        
        submenu_builder.build().unwrap()
    }


}

impl Submenu {
    /// –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ –ø–æ–¥–º–µ–Ω—é
    pub fn new(name: String) -> Self {
        Self {
            name,
            icon: None,
            items: Vec::new(),
        }
    }

    /// –°–æ–∑–¥–∞–µ—Ç –ø–æ–¥–º–µ–Ω—é —Å –∏–∫–æ–Ω–∫–æ–π
    pub fn with_icon(mut self, icon: String) -> Self {
        self.icon = Some(icon);
        self
    }

    /// –î–æ–±–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –≤ –ø–æ–¥–º–µ–Ω—é
    pub fn add_item(mut self, item: MenuItem) -> Self {
        self.items.push(item);
        self
    }

    /// –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –ø–æ–¥–º–µ–Ω—é
    // pub fn add_items(mut self, items: Vec<MenuItem>) -> Self {
    //     self.items.extend(items);
    //     self
    // }

    /// –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –ø–æ–¥–º–µ–Ω—é —Å –∏–∫–æ–Ω–∫–æ–π
    pub fn get_display_name(&self) -> String {
        if let Some(icon) = &self.icon {
            format!("{} {}", icon, self.name)
        } else {
            format!("üìÅ {}", self.name)
        }
    }

    /// –°–æ–∑–¥–∞–µ—Ç Tauri –ø–æ–¥–º–µ–Ω—é –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Submenu
    pub fn create_tauri_submenu(&mut self, app: &AppHandle<Wry>) -> TauriSubmenu<Wry> {
        let display_name = self.get_display_name();
        let mut submenu_builder = SubmenuBuilder::new(app, &display_name);
        
        for item in self.items.iter_mut() {
            if item.has_submenu() {
                // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–æ–∑–¥–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω–æ–µ –ø–æ–¥–º–µ–Ω—é
                let nested_submenu = item.create_tauri_submenu(app);
                submenu_builder = submenu_builder.item(&nested_submenu);
            } else {
                let tauri_item = item.create_tauri_menu_item(app);
                match tauri_item {
                    MenuItemOrSubmenu::IconItem(icon_item) => {
                        submenu_builder = submenu_builder.item(&icon_item);
                    }
                    MenuItemOrSubmenu::CheckItem(check_item) => {
                        submenu_builder = submenu_builder.item(&check_item);
                    }
                    MenuItemOrSubmenu::Submenu(_) => {
                        // –≠—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –∑–¥–µ—Å—å
                    }
                }
            }
        }
        
        submenu_builder.build().unwrap()
    }
}

impl SystemMenu {
    /// –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ —Å–∏—Å—Ç–µ–º–Ω–æ–µ –º–µ–Ω—é
    pub fn new() -> Self {
        Self {
            items: Vec::new(),
            submenus: Vec::new(),
        }
    }

    /// –î–æ–±–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –≤ –º–µ–Ω—é
    pub fn add_item(mut self, item: MenuItem) -> Self {
        self.items.push(item);
        self
    }

    /// –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–¥–º–µ–Ω—é –≤ –º–µ–Ω—é
    pub fn add_submenu(mut self, submenu: Submenu) -> Self {
        self.submenus.push(submenu);
        self
    }



    /// –°–æ–∑–¥–∞–µ—Ç SystemMenu –∏–∑ ConfigManager —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–π
    pub fn from_configs_with_states(configs: &[crate::config::Config], _app: Option<&AppHandle<Wry>>) -> Self {
        let mut system_menu = SystemMenu::new();

        for config in configs {
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            if let Some(enabled) = config.enabled {
                if !enabled {
                    continue;
                }
            }

            for command in &config.commands {
                let menu_item = MenuItem::from_command_config(command);
                
                if menu_item.has_submenu() {
                    // –ï—Å–ª–∏ —É —ç–ª–µ–º–µ–Ω—Ç–∞ –µ—Å—Ç—å –ø–æ–¥–º–µ–Ω—é, —Å–æ–∑–¥–∞–µ–º Submenu
                    let mut submenu = Submenu::new(command.name.clone())
                        .with_icon(command.icon.clone().unwrap_or_else(|| "üìÅ".to_string()));
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ–¥–º–µ–Ω—é
                    if let Some(submenu_items) = &command.submenu {
                        for sub_command in submenu_items {
                            let sub_menu_item = MenuItem::from_command_config(sub_command);
                            submenu = submenu.add_item(sub_menu_item);
                        }
                    }
                    
                    system_menu = system_menu.add_submenu(submenu);
                } else {
                    // –ò–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
                    system_menu = system_menu.add_item(menu_item);
                }
            }
        }

        system_menu
    }

    /// –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–∞–π–º–µ—Ä—ã –¥–ª—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
    pub fn start_all_monitor_timers(&mut self) {
        eprintln!("[Monitor] Starting timers for all monitor items");
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä—ã –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        for item in &mut self.items {
            if item.is_monitor() {
                eprintln!("[Monitor] Found monitor item in main items: {}", item.config.id.as_ref().unwrap_or(&item.config.name));
                item.start_monitor_timer();
            }
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä—ã –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –ø–æ–¥–º–µ–Ω—é
        for submenu in &mut self.submenus {
            for item in &mut submenu.items {
                if item.is_monitor() {
                    eprintln!("[Monitor] Found monitor item in submenu: {}", item.config.id.as_ref().unwrap_or(&item.config.name));
                    item.start_monitor_timer();
                }
            }
        }
        
        eprintln!("[Monitor] Finished starting timers");
    }

    /// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    pub fn stop_all_monitor_timers(&mut self) {
        eprintln!("[Monitor] Stopping all monitor timers");
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä—ã –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        for item in &mut self.items {
            if item.is_monitor() {
                item.stop_monitor_timer();
            }
        }
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä—ã –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –ø–æ–¥–º–µ–Ω—é
        for submenu in &mut self.submenus {
            for item in &mut submenu.items {
                if item.is_monitor() {
                    item.stop_monitor_timer();
                }
            }
        }
        
        eprintln!("[Monitor] Finished stopping timers");
    }



    /// –°–æ–∑–¥–∞–µ—Ç Tauri –º–µ–Ω—é –∏–∑ SystemMenu
    pub fn create_tauri_menu(&mut self, app: &AppHandle<Wry>) -> tauri::menu::Menu<Wry> {
        let mut tray_menu_builder = MenuBuilder::new(app);
        let mut menu_items = Vec::new();

        // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –º–µ–Ω—é
        for item in &mut self.items {
            if item.has_submenu() {
                let submenu = item.create_tauri_submenu(app);
                menu_items.push(MenuItemOrSubmenu::Submenu(submenu));
            } else {
                let tauri_item = item.create_tauri_menu_item(app);
                menu_items.push(tauri_item);
            }
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–º–µ–Ω—é
        for submenu in &mut self.submenus {
            let tauri_submenu = submenu.create_tauri_submenu(app);
            menu_items.push(MenuItemOrSubmenu::Submenu(tauri_submenu));
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –º–µ–Ω—é
        for item in menu_items {
            match item {
                MenuItemOrSubmenu::Submenu(submenu) => {
                    tray_menu_builder = tray_menu_builder.item(&submenu);
                }
                MenuItemOrSubmenu::IconItem(icon_item) => {
                    tray_menu_builder = tray_menu_builder.item(&icon_item);
                }
                MenuItemOrSubmenu::CheckItem(check_item) => {
                    tray_menu_builder = tray_menu_builder.item(&check_item);
                }
            }
        }

        tray_menu_builder.build().unwrap()
    }
}

impl Default for SystemMenu {
    fn default() -> Self {
        Self::new()
    }
}

/// Enum –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–µ–Ω—é
pub enum MenuItemOrSubmenu {
    Submenu(TauriSubmenu<Wry>),
    IconItem(IconMenuItem<Wry>),
    CheckItem(CheckMenuItem<Wry>),
}